package chess;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Objects;

/**
 * Represents a single chess piece
 * <p>
 * Note: You can add to this class, but you may not alter
 * signature of the existing methods.
 * <p>
 * You will need variables for the team colour and the piece type.
 * <p>
 * This class is also where we will call the specific piece classes based on what piece is in play.
 */
public class ChessPiece {

    private ChessGame.TeamColor teamColor;
    private ChessPiece.PieceType pieceType;

    /**
     * This is telling us what we need to define a piece.
     * @param pieceColor
     * @param type
     */
    public ChessPiece(ChessGame.TeamColor pieceColor, ChessPiece.PieceType type) {
        this.teamColor = pieceColor;
        this.pieceType = type;
    }

    /**
     * This is an override generated by right-clicking on the class code.
     * @param o
     * @return
     */
    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChessPiece that = (ChessPiece) o;
        return teamColor == that.teamColor && pieceType == that.pieceType;
    }

    /**
     * This is an override generated by right-clicking on the class code.
     * @return
     */
    @Override
    public int hashCode() { return Objects.hash(teamColor, pieceType); }

    /**
     * This is an override generated by right clicking on the class code.
     * @return
     */
    @Override
    public String toString() {
        return "ChessPiece{" +
                "teamColor=" + teamColor +
                ", pieceType=" + pieceType +
                '}';
    }

    /**
     * The various different chess piece options
     */
    public enum PieceType {
        KING,
        QUEEN,
        BISHOP,
        KNIGHT,
        ROOK,
        PAWN
    }

    /**
     * This method simply returns the team colour of the pieces team.
     * @return Which team this chess piece belongs to
     */
    public ChessGame.TeamColor getTeamColor() { return teamColor; }

    /**
     * This method simply returns the type of piece that is being used.
     * @return which type of chess piece this piece is
     */
    public PieceType getPieceType() { return pieceType; }

    /**
     * Calculates all the positions a chess piece can move to
     * Does not take into account moves that are illegal due to leaving the king in
     * danger
     * <p>
     * Until ready to implement the piece classes, have this function return null to avoid not implemented errors.
     * <p>
     * This method checks which piece is currently in play and returns all the possible moves that piece can make.
     * @param board
     * @param myPosition
     * @return Collection of valid moves
     */
    public Collection<ChessMove> pieceMoves(ChessBoard board, ChessPosition myPosition) {
        if (pieceType == PieceType.BISHOP) {
            return Bishop.possibleMoves(myPosition, board);
        }

        if (pieceType == PieceType.ROOK) {
            return Rook.possibleMoves(myPosition, board);
        }

        if (pieceType == PieceType.KNIGHT) {
            return Knight.possibleMoves(myPosition, board);
        }

        if (pieceType == PieceType.KING) {
            return King.possibleMoves(myPosition, board);
        }

        if (pieceType == PieceType.QUEEN) {
            return Queen.possibleMoves(myPosition, board);
        }

        if (pieceType == PieceType.PAWN) {
            return Pawn.possibleMoves(myPosition, board);
        }

        return null;
    }
}
